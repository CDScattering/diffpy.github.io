Interactive mode
========================================================================

.. program:: pdfgetx3
.. py:currentmodule:: diffpy.pdfgetx

The interactive mode is activated by using either the
:option:`-i, --interact <-i>` option or a non-empty
:option:`--plot <-p>` option.  In the interactive mode
the program starts an IPython interactive shell and pre-loads several
functions and variables related to the PDF calculation.  It also defines
a ``%pdfgetx3`` macro, which can be used with a same command-line syntax
as the :program:`pdfgetx3` program from a system shell.  The interactive
session is also initialized with all functions from the matplotlib
:py:mod:`!pylab` module for convenient plotting.  The functions and
variables related to PDF processing are:

.. py:function:: pdfgetter

   Instance of the :py:class:`!PDFGetter` class which serves as a
   low-level function that calculates the PDF.  This is a callable
   object, which takes as an argument a pair of input arrays for
   (two-theta, intensity).  It can be also called with a keyword
   argument ``filename=FILE``, which would read the input arrays
   from the specified file.  When called with no arguments,
   it calculates PDF from the last input data.

   :return:
      A pair of output arrays `(r, G)`.

.. interactvar:: config

   Instance of the :py:class:`!PDFConfig` class that stores the
   :ref:`parameters and input files <my-ioparameters>` for the program.
   Use ``print config`` to display the current configuration values.  This
   is the same object as :data:`!pdfgetter.config`.  Configuration may
   be changed by setting a respective attribute of the
   :interactvar:`!config` object, for example::

      In [1]: config.qmax = 21

   The :py:data:`!config` values may be also changed by calling the
   :py:func:`pdfgetter` or :py:func:`processFiles` function with a
   corresponding keyword argument, for example
   ``processFiles(qmax=20, force=True)``.

.. interactvar:: iraw
             iq
             sq
             fq
             gr

   These variables are assigned the input raw intensities and the
   intermediate results, stored as matrix rows.  The matrix rows
   correspond to twotheta1, intensity1, twotheta2, intensity2, etc.
   Because matrices are iterated row first, the raw intensities
   from all input files can be plotted with the matplotlib plot
   function as ``plot(*iraw)``.

   These variables should be considered read-only and are reset
   with subsequent PDF calculations.

.. py:function:: tuneconfig(plotids=None, pdfgetter=None, axeslist=None)

   Show a GUI dialog for interactive tuning of configuration variables.

   :arg plotids:
      string or iterable that specify what interactive plots should be
      tuned.  By default the same as config.plot.  Can be also an
      integer index or name of a transformation in pdfgetter or a
      reference to a :py:class:`!Transformation` object.

   :arg pdfgetter:
      optional PDFGetter object to be tuned.  This is by default
      the interactive :py:func:`pdfgetter` object.

   :arg axeslist:
      optional list of matplotlib Axes for displaying the interactive
      plots.  When None, use subplot(N, 1, i) to create the parent axes.

   .. note::

      Changes from :py:func:`!tuneconfig` apply only to the configuration
      and results in memory.  Use the :py:func:`processFiles` function
      to save them to disk.

   .. seealso:: :ref:`my-tuneconfig` tutorial.

.. py:function:: processFiles(filename=None, **kwargs)

   Process all input files again with the current configuration values.
   This is a higher-level function than :py:func:`pdfgetter`, as
   it also saves output files and produces plots as specified by the
   :interactvar:`config` object.

   :arg filename:
      One or more input files to be converted to PDFs and saved or
      plotted according to the :py:data:`!config` settings.  Use the
      previous list of input files when not specified.

   :arg kwargs:
      optional keyword arguments that are applied to the :py:data:`!config`
      object, for example `(force=True, qmax=18)`.

   This function updates the :interactvar:`config.inputfiles <config>`
   list and the :interactvar:`iraw`, :interactvar:`iq`,
   :interactvar:`sq`, :interactvar:`fq` and :interactvar:`gr`
   interactive variables.

.. py:function:: clearSession()

   Clear all elements from the :interactvar:`config.inputfiles <config>`
   and also the
   :interactvar:`iraw`, :interactvar:`iq`, :interactvar:`sq`,
   :interactvar:`fq` and :interactvar:`gr` variables.

   :return:
      No return value.

.. py:function:: loadData(filename, minrows=10, **kwargs)

   Load an array of floating point numbers from a text data file.

   The data reading starts at the first matrix-like block of at least
   `minrows` rows and constant number of columns.  This seems to work
   for most of text data files including those generated by PDFgetX2.

   :arg filename:
      File to be loaded.

   :arg minrows:
      Minimum number of rows in the first data block.
      All rows must have the same number of floating point values.

   :arg usecols:
      Indices or names of the columns to be loaded, by default all
      columns in a data block.  Data blocks that do not contain
      sufficient number of columns are skipped.  When `usecols` contains
      string items, these are looked up in the datafile header and
      translated to column indices.  When `usecols` is a single string,
      it gets split to names at any comma or whitespace character.

   :arg unpack:
      Return data as a sequence of columns that allows tuple
      unpacking such as  `x, y = loadData(FILENAME, unpack=True)`.
      Note transposing the loaded array as loadData(FILENAME).T
      has the same effect.

   :arg kwargs: Keyword arguments that are passed to the
      `numpy.loadtxt <http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html>`_
      function.

   :return:
      Returns a numpy array of the loaded data.

.. py:currentmodule:: diffpy.pdfgetx.plotdata
.. py:function:: plotdata(filenames, style=None, x=None, y=None, hold=None, **kwargs)

   Plot one or more text data files.

   :arg filenames:
      Filename or a list of text data files to be plotted.

   :arg style:
      Optional format string for the
      `matplotlib plot function
      <http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot>`_.

   :arg x,y:
      Column or columns to be used for the x and y data.
      This is most often a single integer or an iterable of
      integer indices.  It can be also a comma separated string
      of column names that are matched against column headers in the
      text data file.  Also accepted is a string integer or an
      integer range formatted as ``START:STOP`` or ``START:STOP:STEP``.
      A special symbol ``"."`` can be used for a data-row index.
      Otherwise these arguments must be compatible with the
      `usecols` argument of the :py:func:`~diffpy.pdfgetx.loadData`
      function.  When not specified :py:func:`!plotdata` uses the first
      column as x and the second column as y data.

   :arg hold:
      Add new lines to the plot when `True`, replace the old lines
      when `False` or reuse the axes hold state if `None`.

   :arg kwargs:
      Any other keyword arguments passed to the
      matplotlib plot function.

   :return:
      This function returns a list of `matplotlib Line2D
      <http://matplotlib.org/api/artist_api.html#matplotlib.lines.Line2D>`_
      objects.


.. py:currentmodule:: diffpy.pdfgetx
.. py:function:: findfiles(patterns=(), path=None)

   Find files in the current directory
   that match all specified patterns.

   :arg patterns:
      String patterns that must all match in returned filenames.
      Can be a single string with patterns separated by whitespace
      characters.  The patterns are matched either as fixed strings
      or as :ref:`special patterns <my-findpatterns>`.

   :arg path:
      Optional list of directories to be searched instead of the
      current directory.  Can be also a string which is taken as a
      single directory path.

   :return:
      Return a list of matching filenames.  Return all files in the
      current directory when called without `patterns`.
